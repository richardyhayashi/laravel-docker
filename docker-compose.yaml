services:
  nginx:
    image: nginx:1.27.0-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - 8080:80
    volumes:
      - ./src:/var/www/html
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - laravel
    depends_on:
      - php

  #postgres:
  #  image: postgres:16.3-alpine
  #  container_name: postgres
  #  restart: unless-stopped
  #  tty: true
  #  ports:
  #    - ${DB_PORT_OUT}:${DB_PORT}
  #  volumes:
  #    - db-data:/var/lib/postgresql/data
  #  environment:
  #    POSTGRES_USER: ${DB_USERNAME}
  #    POSTGRES_PASSWORD: ${DB_PASSWORD}
  # networks:
  #   - laravel

  #mysql:
  #  image: mysql:8.4.0
  #  container_name: mysql
  #  restart: unless-stopped
  #  tty: true
  #  ports:
  #    - ${DB_PORT_OUT}:${DB_PORT}
  #  volumes:
  #    - db-data:/var/lib/mysql
  #  environment:
  #    MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #    MYSQL_DATABASE: ${DB_DATABASE}
  #    MYSQL_USER: ${DB_USERNAME}
  #    MYSQL_PASSWORD: ${DB_PASSWORD}
  #    SERVICE_TAGS: dev
  #    SERVICE_NAME: mysql
  #  networks:
  #    - laravel

  php:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Use user id & group id in .env
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    user: ${USER_ID}:${GROUP_ID}
    image: laravel-app:1.0.0
    container_name: laravel_container
    restart: unless-stopped
    ports:
      - 9000:9000
    volumes:
      - ./src:/var/www/html
      # Set the logins and groups identical to host environment
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
    #depends_on:
    #  - postgres
    #  - mysql
    networks:
      - laravel
  
volumes:
  db-data:

networks:
  laravel: